# ClinicalTrials.gov MCP Server: Developer Guide & Architectural Standards

**Effective Date:** 2025-06-17

This document mandates the development practices, architectural patterns, and operational procedures for the `clinicaltrialsgov-mcp-server`. It is the authoritative guide for ensuring code quality, consistency, and maintainability. All development must adhere to these standards.

## I. Core Architectural Principles

Our architecture is built on a clear separation of concerns, ensuring that code is modular, testable, and easy to understand.

### 1. Logic Throws, Handlers Catch

This is the cornerstone of our error-handling strategy.

- **Core Logic (`logic.ts`)**: This layer is responsible for business logic only. It should be pure and self-contained. If an error occurs (e.g., failed validation, API error), it **must `throw` a structured `McpError`**. Logic files **must not** contain `try...catch` blocks for formatting final responses.
- **Handlers (`registration.ts`, Transports)**: This layer is responsible for invoking core logic and managing communication protocols. It **must** wrap all calls to the logic layer in a `try...catch` block. This is the only place where errors are caught, processed by the `ErrorHandler`, and formatted into a final `CallToolResult` or HTTP response.

### 2. Structured, Traceable Operations

Every operation must be traceable from start to finish through structured logging and context propagation.

- **`RequestContext`**: Every significant operation must begin by creating a `RequestContext` using `requestContextService.createRequestContext()`. This context, containing a unique `requestId`, must be passed down through all subsequent function calls.
- **`Logger`**: All logging must be done through the centralized `logger` singleton, and every log call must include the current `RequestContext`.

## II. Tool Development Workflow

This section defines the mandatory workflow for creating and modifying tools.

### A. File and Directory Structure

Each tool must reside in its own directory within `src/mcp-server/tools/` and follow this structure:

- **`toolName/`**
  - **`index.ts`**: A barrel file that exports only the `register...` function from `registration.ts`.
  - **`logic.ts`**: Contains the core business logic. It **must** define and export the tool's Zod input schema, all inferred TypeScript types (input and output), and the main logic function.
  - **`registration.ts`**: Registers the tool with the MCP server. It imports from `logic.ts` and implements the "Handler" role described in our core principles.

### B. The Authoritative Pattern: `getStudy` Tool

The `clinicaltrials_get_study` tool serves as a canonical example for tool development in this project.

**Step 1: Define Schema and Logic (`logic.ts`)**

The `logic.ts` file defines the "what" and "how" of the tool. It is self-contained and throws errors when it cannot fulfill its contract.

```typescript
/**
 * @fileoverview Defines the core logic, schemas, and types for the `clinicaltrials_get_study` tool.
 * @module src/mcp-server/tools/getStudy/logic
 */
import { z } from "zod";
import { logger, type RequestContext } from "../../../utils/index.js";
import { ClinicalTrialsGovService } from "../../../services/clinical-trials-gov/ClinicalTrialsGovService.js";
import { Study } from "../../../services/clinical-trials-gov/types.js";

// 1. Define and export the Zod schema
export const GetStudyInputSchema = z.object({
  nctId: z
    .string()
    .regex(/^[Nn][Cc][Tt]\d+$/)
    .describe("The NCT Number of the study to fetch."),
  // ... other fields
});

// 2. Define and export TypeScript types
export type GetStudyInput = z.infer<typeof GetStudyInputSchema>;

/**
 * 3. Implement and export the core logic
 * @param params - The validated input parameters for the tool.
 * @param context - The request context for logging and tracing.
 * @returns A promise that resolves with the detailed study data.
 */
export async function getStudyLogic(
  params: GetStudyInput,
  context: RequestContext
): Promise<Study> {
  logger.debug(`Fetching study ${params.nctId}...`, { ...context });
  const service = new ClinicalTrialsGovService();
  const study = await service.fetchStudy(params.nctId, context);
  return study;
}
```

**Step 2: Register the Tool and Handle Errors (`registration.ts`)**

The `registration.ts` file wires the logic into the MCP server and handles all outcomes.

```typescript
/**
 * @fileoverview Handles the registration of the `clinicaltrials_get_study` tool.
 * @module src/mcp-server/tools/getStudy/registration
 */
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import type { CallToolResult } from "@modelcontextprotocol/sdk/types.js";
import {
  ErrorHandler,
  logger,
  requestContextService,
} from "../../../utils/index.js";
import { GetStudyInput, GetStudyInputSchema, getStudyLogic } from "./logic.js";

/**
 * Registers the 'clinicaltrials_get_study' tool with the MCP server.
 * @param server - The MCP server instance.
 */
export const registerGetStudyTool = async (
  server: McpServer
): Promise<void> => {
  server.tool(
    "clinicaltrials_get_study",
    "Retrieves detailed information for a single clinical study by its NCT number.",
    GetStudyInputSchema.shape,
    async (params: GetStudyInput): Promise<CallToolResult> => {
      const handlerContext = requestContextService.createRequestContext();
      try {
        const result = await getStudyLogic(params, handlerContext);
        return {
          content: [{ type: "text", text: JSON.stringify(result, null, 2) }],
          isError: false,
        };
      } catch (error) {
        const handledError = ErrorHandler.handleError(error, {
          ...handlerContext,
          toolName: "clinicaltrials_get_study",
        });
        const mcpError =
          handledError instanceof McpError
            ? handledError
            : new McpError(/* ... */);
        return {
          content: [
            {
              type: "text",
              text: JSON.stringify({
                error: {
                  code: mcpError.code,
                  message: mcpError.message,
                  details: mcpError.details,
                },
              }),
            },
          ],
          isError: true,
        };
      }
    }
  );
};
```

## III. Integrating External Services

For interacting with the ClinicalTrials.gov API, use the dedicated service singleton.

- **`ClinicalTrialsGovService`**: Located at `src/services/clinical-trials-gov/ClinicalTrialsGovService.ts`, this class manages all interactions with the external API. It encapsulates the base URL, handles request construction, and performs initial response validation.
- **Usage**: Import the `ClinicalTrialsGovService` into your tool's `logic.ts` file to use it.

## IV. Code Quality and Documentation

- **JSDoc**: Every file must start with a `@fileoverview` and `@module` block. All exported functions and types must have clear, concise JSDoc comments.
- **Clarity Over Brevity**: Write self-documenting code with meaningful variable and function names.
- **Formatting**: All code must be formatted using Prettier (`npm run format`) before committing.

## V. Security Mandates

- **Input Sanitization**: All inputs from external sources must be treated as untrusted.
- **Secrets Management**: All secrets must be loaded from environment variables via the `config` module.
- **Authentication & Authorization**: The server supports `jwt` and `oauth` modes. Protect tools by checking scopes where necessary.

This guide is the single source of truth for development standards. All code reviews will be conducted against these principles.
